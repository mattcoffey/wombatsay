#!/bin/bash
#===============================================================================
#
#          FILE:  wombatsay
#
#         USAGE:  ./wombatsay [some words]
#                 echo $(fortune -n 60 -s) | ./wombatsay
#
#   DESCRIPTION:  Print to stdout a picture of a wombat with a phrase defined by
#                 either the program arguments or stdin
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  Doesn't work that well with long lines or tabs
#         NOTES:  I found the wombat here:
#
#                 http://www.retrojunkie.com/asciiart/animals/wombats.htm
#
#                 If you want me to credit you, get in touch.
#        AUTHOR:  Matt Coffey (), 
#       COMPANY:  
#       VERSION:  1.0
#       CREATED:  11/17/15 23:12:19 GMT
#      REVISION:  ---
#===============================================================================

arguments=( "$@" )
say=${arguments[*]}
sayLength=${#say}

# If there were no program arguments
if [[ $sayLength -lt 1 ]]; then
    # If there is nothing in stdin
    if [[ -t 0 ]]; then
        echo 'Usage: ./wombatsay [some words]'
        exit 0
    fi
    say=$(cat)
    sayLength=${#say}
fi

IFS=$'\n' read -rd '' -a lines <<<"$say"

sayLength=0
for index in "${!lines[@]}"
do
    line=${lines[index]}
    lineLength=${#line}
    if [ $lineLength -gt $sayLength ]; then
        sayLength=$lineLength
    fi
done

for index in "${!lines[@]}"
do
    line=${lines[index]}
    lineLength=${#line}
    padLength=$(($sayLength-$lineLength+1))
    rightPadding=$(head -c $padLength < /dev/zero | tr '\0' ' ')
    lines[$index]="< ${lines[index]}$rightPadding >"
done

bubbleLength=$(($sayLength+1))
bubble=$(head -c $bubbleLength < /dev/zero | tr '\0' '-')

paddingLength="$((27-$sayLength))"
if [[ $paddingLength -lt 0 ]]; then
    padding=''
else
    padding=$(head -c $paddingLength < /dev/zero | tr '\0' ' ')
fi

cat <<"EOF"
                               ,.--""""--.._
                             ."     .'      `-.
                            ;      ;           ;
                           '      ;             )
                          /     '             . ;
                         /     ;     `.        `;
                       ,.'     :         .     : )
                       ;|\'    :      `./|) \  ;/
                       ;| \"  -,-   "-./ |;  ).;
                       /\/              \/   );
                      :                 \    ;
                      :     _      _     ;   )
                      `.   \;\    /;/    ;  /
                        !    :   :     ,/  ;
                         (`. : _ : ,/""   ;
                          \\\`"^" ` :    ;
                              /    (    )
                             /     ////
EOF

echo "$padding  $bubble"
for line in "${lines[@]}"
do
    echo "$padding$line"
done
echo "$padding  $bubble"

exit 0
